//for better uderstanding open your notebook. 
public class MergeSort {
    public static void print(int arr[]){
        for(int i=0;i<arr.length;i++) {
            System.out.println(arr[i]+" ");
        }
    }
    public static void Mergesort(int arr[],int si,int ei){
        //BASE CASE
        if(si>=ei){
            return;
        }
        int mid=si+(ei-si)/2;
        //SORTING FOR LEFT SIDE
        Mergesort(arr,si,mid);
        //SORTING FOR RIGHT SIDE
        Mergesort(arr,mid+1,ei);
        //Calling for Merging
        Merge(arr,si,mid,ei);
    }
    public static void Merge(int arr[],int si,int mid,int ei){
        //left:(0,3)=4 & right:(4,6)=3. THEREFORE total elem=7
        //So, when we add 1:(6-0+1=7) while when we don't(6-0=6)
        int temp[]=new int[ei-si+1];
        int i=si;//indx for first sorted  array
        int j=mid+1;// index for right sorted array
        int k=0;//for temporary array
        while(i<=mid && j<=ei) {
            if (arr[i] < arr[j]) {
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }
            //now since there is a condition in the while loop which consists of (&)so it may happen that
            //some elmnts of right side or the left side are left so for the remaining elemnts we use another loop.
            while(i<=mid){
                temp[k++]=arr[i++];
            }
            //for left over elemnts in right array
            while (j<=ei){
                temp[k++]=arr[j++];
            }
            for(k=0,i=si;k<temp.length;k++,i++) {
                arr[i]=temp[k];
            }
        }


    public static void main(String args[]){
        int arr[]={6,3,9,5,2,8};
        Mergesort(arr,0,arr.length-1);
        print(arr);
    }
}
