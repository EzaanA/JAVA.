import java.util.*;
public class bitmanupulation {
    public static int getbit(int n,int i){
    int bitmask=1<<i;
    if((n&bitmask) == 0) return 0;
        else return 1;
}
public static int setbit(int n,int i){
        int bitmask=1<<i;
        return n|bitmask;

}
public static int clearbit(int n,int i){
        int bitmask=~(1<<i);
        return n&bitmask;
}
public static int updatebit(int n,int i,int newbit){
//        if(newbit==0){
//            return clearbit(n,i);
//        }
//        else {
//            return setbit(n,i);
//        }
//    ********************************OR*********************************
     n=clearbit(n,i);
     int bitmask=newbit<<i;
     return n|bitmask;
}

    public static int xoro(int n,int i) {
        int bitmask=(~0)<<i;//~0 makes all the numbers on the left of ith term equal to 1
        return n&bitmask;
    }

    public static int clearrangebit(int n,int i,int j) {
        int a=(~0)<<(j+1);
        int b =(1<<i)-1;
        int bitmask=a|b;
        return  n&bitmask;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n =sc.nextInt();
        int i=2,j=4;
        System.out.println(ispoweroftwo(n));
    }

}
