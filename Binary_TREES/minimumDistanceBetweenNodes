public class minDistBwNodes {


    static public class Node{
        int val;
        Node left;
        Node right;

        public Node(int val){
            this.val=val;
            this.left=null;
            this.right=null;
        }
    }


//YOUVE DONE LCA BEFORE AS WELL
    public static Node lca(Node root,int n1,int n2){
        if(root==null|| root.val==n1 || root.val==n2){
            return root;
        }

        Node leftLca=lca(root.left,n1,n2);
        Node rightLca=lca(root.right,n1,n2);

        if(leftLca==null){
            return rightLca;
        }
        if(rightLca==null){
            return leftLca;
        }

        return root;
    }

    public static int calcDis(Node root,int n){
        if(root==null){
            return -1;
        }
        
        if(root.val==n){
            return 0;
        }


        int leftdis=calcDis(root.left,n);
        int rightdis=calcDis(root.right,n);

        if(leftdis==-1 && rightdis==-1){
            return -1;
        }
        else if(leftdis==-1){
            return rightdis+1;
        }
        else{
            return leftdis+1;
        }

    }




    public static int calculatingMinDistBwNode(Node root,int n1,int n2){
        Node lca = lca(root,n1,n2);

        int distance1=calcDis(lca,n1);
        int distance2=calcDis(lca,n2);

        return distance1+distance2;

    }
    public static void main(String[] args) {
        Node root=new Node(1);
        root.left=new Node(2);
        root.right=new Node(3);
        root.left.left=new Node(4);
        root.left.right=new Node(5);
        root.right.left=new Node(6);
        root.right.right=new Node(7);
        int n1=5,n2=7;
        System.out.println(calculatingMinDistBwNode(root,n1,n2));
    }
}
