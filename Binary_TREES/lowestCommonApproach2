public class lowestCommonApproach2 {

    static public class Node{
        int val;
        Node left;
        Node right;

        public Node(int val){
            this.val=val;
            this.left=null;
            this.right=null;
        }
    }


    public static Node Lca2(Node root,int n1,int n2){
        if(root==null || root.val==n1 || root.val==n2){
            return root;
        }

        Node LeftLca=Lca2(root.left,n1,n2);
        Node RightLca=Lca2(root.right,n1,n2);

        if(RightLca==null){
            return LeftLca;
        }
        if(LeftLca==null){
            return RightLca;
        }

        return root;
    }

    public static void main(String[] args) {
        Node root=new Node(1);
        root.left=new Node(2);
        root.right=new Node(3);
        root.left.left=new Node(4);
        root.left.right=new Node(5);
        root.right.left=new Node(6);
        root.right.right=new Node(7);

        System.out.println(Lca2(root,24,17).val);
    }
}
