public class Reverse_A_LL {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            this.next= null;
        }
    }

    public static Node head;
    public static Node tail;

    public static void add(int data){
        Node newNo= new Node(data);
        if(head==null) {
            head = newNo;
            tail=newNo;
        }
        else {
            tail.next= newNo;
            tail= newNo;
        }
    }
    public static  void print(){
        Node temp = head;
    while(temp!=null){
        System.out.print(temp.data+" ");
        temp= temp.next;
    }
    }
    public static void addp(){
        System.out.println();
        Node temp = head;
        System.out.println(temp);
        while(temp !=null){
            System.out.print(temp.next+"_____________");
            temp = temp.next;
        }
    }
    public static void Reversell(){
        Node prev= null ;
        Node curr= head;
        Node nxt;
        while(curr!=null){
            nxt=curr.next;
            curr.next=prev;
            prev =curr;
            curr= nxt;
        }
head=prev;

    }
public static  int size()
    {
        Node temp=head;
        int i=0;
        while(temp!=null){
            temp = temp.next;
            i++;
        }
        return  i;
    }

    public static void deletefromend(int n){
        int sz=0;
        Node temp = head;
        while (temp!= null){
            sz++;
            temp=temp.next;
        }
        System.out.println("this is size"+sz);
        if(sz==n){//like agar head ko hi delete krna hoga to bss head ko aage badado OR remove first
            head=head.next;
            return;
        }
        int i =1;
        int iTOfind=sz-n;//so by using this we can find the element to be deleted from the head as head is usually used to locate stuff & not tail
        Node prev= head;

        while(i<iTOfind){
            prev= prev.next;
            i++;
        }
        prev.next=prev.next.next;
        return;
    }





    public static Node findmid(){
        Node slow = head;
        Node fast= head;
            while(fast != null && fast.next !=null  ){
                slow= slow.next;
                fast= fast.next.next;
        }
        return slow;//slow is my mid node
    }

    public static boolean checkPal(){
        if(head==null || head.next==null){
            return true;
        }
        //step 1 : find mid
        Node mid = findmid();
        //step 2 : 2nd half ko Reverse karna
        Node prev = null;
        Node curr = mid;
        Node nxt;
        while(curr!=null){
            nxt = curr.next;
            curr.next= prev;
            prev= curr;
            curr= nxt;
        }
//        head= prev;//like end pp phoch jyga curr so usse pehle prev hi to rhega so vahi head hoga
        Node right = prev;//right half head
        Node left = head;
        //step 3 : check if 1st half(left) = 2nd half (right)
        while(right != null){
            if(left.data != right.data){
                return  false;
            }
            left = left.next;
            right=right.next;
        }
        return  true;
    }
//here made a cycle in ll
    public static void makingcycle(){
        Node temp=head;
        int i=0;
        while(temp.next!=null){
            temp=temp.next;
        }
        temp.next=findmid();
    }
//here detected it 
    public static boolean detectingcycle(){
        Node slow= head;
        Node fast= head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast= fast.next.next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        Reverse_A_LL ll = new Reverse_A_LL();
        ll.add(1);
        ll.add(2);
        ll.add(3);
        ll.add(4);
        ll.add(5);
        ll.add(6);
        print();
//        System.out.println();
//        ll.Reversell();
//        print();

        System.out.println();
//        ll.addp();
//        ll.deletefromend(3);
//        print();
//        ll.findmid();
//        System.out.println();
//        print();
//                System.out.println(ll.checkPal());
        ll.makingcycle();
//        print();
        System.out.println(ll.detectingcycle());

    }
}
