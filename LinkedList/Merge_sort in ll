//import java.util.LinkedList;
public class MergeSort_LL {

    public static class Node{
        int data;
        Node next;
         public  Node(int data){
             this.data= data;
             this.next=null;
         }
    }

    public static Node head;
    public static Node tail;


    public static void add(int data) {
        Node newN = new Node(data);
        if (head == null) {
            head = newN;
            tail = newN;
        } else {
            tail.next = newN;
            tail = newN;
        }
    }

    public static Node mid(Node head){
        Node slow =head;
        Node fast= head.next;
        while(fast==null && fast.next==null){
            slow= slow.next;
            fast = fast.next.next;
        }
        return slow;
    }





    public static void print(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
    }

    public static void reverse(Node mid){
        Node prev = null;
        Node curr = mid;
        Node nxt;
        while(curr!=null){
            nxt=curr.next;
            curr.next = prev;
            prev = curr;
            curr= nxt;
        }

        head=prev;
    }




    public static Node Merge(Node head1,Node head2){
        Node mergedll =new Node(-1);
        Node temp= mergedll;
        while(head1 !=null && head2!=null){
            if(head1.data <=head2.data){
                temp.next= head1;
                head1=head1.next;
                temp=temp.next;
            }
            else {
                temp.next=head2;
                head2=head2.next;
                temp=temp.next;
            }
        }
        while(head1!=null){
            temp.next= head1;
            head1=head1.next;
            temp=temp.next;
        }
        while (head2!=null){
            temp.next= head2;
            head2=head2.next;
            temp= temp.next;
        }
        return mergedll.next;
    }

    public static Node MergeSort(Node head){
        //1-2-3-4-5
        //base case
        if(head==null || head.next==null){
            return head;
        }

//        Step 1: finding Mid
        Node mid = mid(head);//3
//        left & right mergesort
        Node righthead= mid.next;//now the right head points towards 3
        mid.next=null;////- thus (head)ðŸ‘‰1-2-3->null &&  (righthead)ðŸ‘‰4-5;
        Node newleft = MergeSort(head);
        Node newright = MergeSort(righthead);
        //merge
        return Merge(newleft,newright);
    }




    public static void main(String[] args) {
//    LinkedList<Integer> ll = new LinkedList<>();
        MergeSort_LL ll = new MergeSort_LL();
        ll.add(5);
        ll.add(23);
        ll.add(3);
        ll.add(22);
        ll.add(1);
//        System.out.println("THIS is the ll");
//        print();
//        System.out.println("\nTHIS is the SORTED LL");
//                ll.head = ll.MergeSort(head);
//                print();
//        ll.zigzag();
//        ll.reverse(mid(head));
        ll.print();
//        ll.MergeSort(head);
        System.out.println();
        ll.head=ll.MergeSort(ll.head);
        ll.print();
    }
}
