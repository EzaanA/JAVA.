public class sizeOfLargestBSTinBt {

    static class Node {
        int val;
        Node left;
        Node right;

        public Node(int data) {
            this.val = data;
            this.left=this.right=null;
        }
    }

    static class Info{
        boolean isBst;
        int size;
        int min;
        int max;

        public Info(boolean isBst,int size,int min,int max) {
            this.isBst =isBst;
            this.size =size;
            this.min =min;
            this.max =max;
        }
    }

    public static int maxBst= 0;
    public static Info largestBinarySearchTree(Node root){
        if(root == null){
            return new Info(true,0,Integer.MAX_VALUE,Integer.MIN_VALUE);
        }
        Info leftInfo = largestBinarySearchTree(root.left);
        Info rightInfo= largestBinarySearchTree(root.right);

//        boolean isBst = leftInfo.isBst && rightInfo.isBst;
        int size= leftInfo.size+rightInfo.size+1;
        int min=Math.min(Math.min(leftInfo.min ,rightInfo.min),root.val);
        int max = Math.max(Math.max(leftInfo.max,rightInfo.max),root.val);

        if(root.val<=leftInfo.max || root.val>=rightInfo.min){
            return new Info(false,size,min,max);
        }

        if(leftInfo.isBst && rightInfo.isBst){
            maxBst = Math.max(maxBst,size);
            return new Info(true,size,min,max);
        }

        return new Info(false,size,min,max);
    }


    public static void main(String[] args) {


//                     50
//                  /      \
//                 30       60
//                /  \     /  \
//               5    20  45   70
//                            /  \
//                           65   80
//                      BT ️⬆

        Node root = new Node(50);
        root.left= new Node(30);
        root.left.left= new Node(5);
        root.left.right= new Node(20);

        root.right=new Node(60);
        root.right.left=new Node(45);
        root.right.right=new Node(70);
        root.right.right.left=new Node(65);
        root.right.right.right=new Node(80);

//                     60
//                    /  \
//                   45   70
//                       /  \
//                      65   80
//       Ans = 5 (LONGEST SUBTREE)⬆

//    System.out.println(largestBinarySearchTree(root).size);
        Info info = largestBinarySearchTree(root);
        System.out.println(maxBst);
    }
}
