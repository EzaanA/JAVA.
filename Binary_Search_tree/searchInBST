public class searchInBST {

    static class Node{
        int data;
        Node left;
        Node right;

        public Node(int data){
            this.data=data;
        }
    }


    public static Node insert(Node root, int val){
        if(root == null){
            root = new Node(val);
            return root;
        }
            if(root.data>val){
                root.left = insert(root.left,val);
            }
            else{
                root.right= insert(root.right,val);
            }
            return root;
    }


    public static boolean searchInBinaryTree(Node root, int key)
    {
        if(root==null){
            return false;
        }
        if(root.data==key){
            return true;
        }
        if(root.data>key){
           return searchInBinaryTree(root.left,key);
        }
        else{
            return searchInBinaryTree(root.right,key);
        }
    }

    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);

    }

    public static void main(String[] args) {
        int key = 6;
        int values[]={5,1,3,4,2,7};
        Node root = null;
        for(int i =0;i<values.length;i++){
            root=insert(root,values[i]);
        }
        inorder(root);
        System.out.println();
        if(searchInBinaryTree(root,key)){
            System.out.println("KEY FOUND");
        }
        else{
            System.out.println("KEY NOT FOUND");
        }

    }
}
