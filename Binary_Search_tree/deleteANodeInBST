public class deleteANode {
    static class Node{
        int data;
        Node left;
        Node right;

        public Node(int data){
            this.data=data;
        }
    }


    public static Node insert(Node root,int val){
        if(root == null){
            root = new Node(val);
            return root;
        }
        if(root.data > val){
            root.left=insert(root.left,val);
        }
        else{
            root.right=insert(root.right,val);
        }
        return root;
    }


    public static void inorder(Node root){
        if(root == null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }

    public static Node findInorderSuccessor(Node root){
        while(root.left!=null){
            root = root.left;
        }
        return root;
    }
    public static Node deleteNode(Node root,int val){
//
        if(root == null){
            return null;
        }

        if(root.data>val){
            root.left=deleteNode(root.left,val);
        }
        else if(root.data<val){
            root.right= deleteNode(root.right,val);
        }

        else{
            //cond 1 : When there's no child
            if(root.left==null && root.right==null){
                return null;
            }

            //cond 2 : when either one child out of the two is null OR has only yone child
            if(root.left==null){
                return root.right;
            }
            else if(root.right==null){
                return root.left;
            }

            //cond 3 : if nether of em is null then OR have both child
            Node inorderSuccessorNode = findInorderSuccessor(root.right);//first we'll find out the inorderSuccessorNode
            root.data = inorderSuccessorNode.data;//then we'll replace the root value with the inorderSuccessorNode that we found
            root.right=deleteNode(root.right,inorderSuccessorNode.data);//then we'll delete the node at the right of the node
            //ALSO CHECK YOUR GREEN NOTEBOOK FOR BETTER UNDERSTANDING
        }
        return root;
    }
    public static void main(String[] args) {
        int key = 7;
        int values[]={8,5,3,1,4,6,10,11,14};
        Node root = null;
        for(int i =0;i<values.length;i++){
            root=insert(root,values[i]);
        }
        inorder(root);

        root = deleteNode(root,key);

        System.out.println();

        inorder(root);


    }
}
